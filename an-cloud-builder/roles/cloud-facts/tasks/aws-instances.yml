---
- name: Get the VPC ID for {{ cloud_vpc_name }}
  ec2_vpc_net_facts:
    aws_access_key: "{{ aws_access_key | default(omit) }}"
    aws_secret_key: "{{ aws_secret_key | default(omit) }}"
    region: "{{ cloud_vpc_data.region }}"
    filters:
      "tag:Name": "{{ cloud_vpc_name }}"
  register: vpc_net_facts

- name: Set VPC ID
  set_fact:
    vpc_id: "{{ vpc_net_facts.vpcs[0].id }}"
  failed_when: vpc_net_facts.vpcs[0] is not defined

- name: Get the instance facts for project {{ cloud_vpc_data.project }}
  ec2_instance_facts:
    region: "{{ cloud_vpc_data.region }}"
    filters:
      vpc-id: "{{ vpc_id }}"
      # "tag:Name": "{{ cloud_instance_item.name | default(omit) }}"
      "tag:Environment": "{{ cloud_vpc_data.project }}"
  register: instance_facts

- name: Create a dict of instances for project {{ cloud_vpc_data.project }}
  set_fact:
    instance_facts_dict: "{{ instance_facts_dict | default({}) | combine({ instance_facts_item.tags.Name: instance_facts_item }) }}"
  with_items: "{{ instance_facts.instances }}"
  loop_control:
    loop_var: instance_facts_item

- name: Initialize inventory_host_dict
  set_fact:
    inventory_host_dict: []
  when: inventory_host_dict is not defined

- name: Initialize inventory_group_dict
  set_fact:
    inventory_group_dict: []
  when: inventory_group_dict is not defined

- include: "aws-instance.yml"
  with_items: "{{ cloud_instance_data | default([]) }}"
  loop_control:
    loop_var: cloud_instance_item
